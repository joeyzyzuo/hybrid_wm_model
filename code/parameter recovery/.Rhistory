# analyze results from parameter recovery
# clear workspace
rm(list=ls())
# load data
d <- read.csv("C:/Users/Administrator/Desktop/github/code/parameter recovery/recovery_b2.csv", sep=";")
## compute correlations for true and estimated parameter values for each parameter
# model-based weight low stakes, stable transitions
cor(d$mixing_weight_low_stable_true, d$mixing_weight_low_stable_estimated)
# model-based weight high stakes, stable transitions
cor(d$mixing_weight_high_stable_true, d$mixing_weight_high_stable_estimated)
# model-based weight low stakes, variable transitions
cor(d$mixing_weight_low_variable_true, d$mixing_weight_low_variable_estimated)
# model-based weight high stakes, variable transitions
cor(d$mixing_weight_high_variable_true, d$mixing_weight_high_variable_estimated)
# reward learning rate
cor(d$reward_learning_rate_true, d$reward_learning_rate_estimated)
# eligibility trace decay
cor(d$eligibility_trace_decay_true, d$eligibility_trace_decay_estimated)
# transition learning rate
cor(d$transition_learning_rate_true, d$transition_learning_rate_estimated)
# inverse softmax temperature
cor(d$inverse_temperature_true, d$inverse_temperature_estimated)
# choice stickiness
cor(d$choice_stickiness_true, d$choice_stickiness_estimated)
# response stickiness
cor(d$response_stickiness_true, d$response_stickiness_estimated)
# analyze results from parameter recovery
# clear workspace
rm(list=ls())
# load data
d <- read.csv("C:/Users/Administrator/Desktop/RLWM论文/code/parameter recovery/recovery_b2.csv", sep=";")
## compute correlations for true and estimated parameter values for each parameter
# model-based weight low stakes, stable transitions
cor(d$mixing_weight_low_stable_true, d$mixing_weight_low_stable_estimated)
# model-based weight high stakes, stable transitions
cor(d$mixing_weight_high_stable_true, d$mixing_weight_high_stable_estimated)
# model-based weight low stakes, variable transitions
cor(d$mixing_weight_low_variable_true, d$mixing_weight_low_variable_estimated)
# model-based weight high stakes, variable transitions
cor(d$mixing_weight_high_variable_true, d$mixing_weight_high_variable_estimated)
# reward learning rate
cor(d$reward_learning_rate_true, d$reward_learning_rate_estimated)
# eligibility trace decay
cor(d$eligibility_trace_decay_true, d$eligibility_trace_decay_estimated)
# transition learning rate
cor(d$transition_learning_rate_true, d$transition_learning_rate_estimated)
# inverse softmax temperature
cor(d$inverse_temperature_true, d$inverse_temperature_estimated)
# fai_decay
cor(d$fai_decay_wm_true, d$fai_decay_wm_estimated)
# choice stickiness
cor(d$choice_stickiness_true, d$choice_stickiness_estimated)
# response stickiness
cor(d$response_stickiness_true, d$response_stickiness_estimated)
d <- read.csv("./recovery_b2.csv", sep=";")
d <- read.csv("./recovery_b2.csv", sep=";")
# conducts a posterior predictive check by comparing reward of participants and simulated agents
# load packages
library(dplyr)
library(ggplot2)
# clear workspace
rm(list=ls())
# import simulated data
trialdata.sim <- read.csv("./trialdata_Hybrid_wm_sim.csv", sep=";")
# factorize
trialdata.sim$simrun <- as.factor(trialdata.sim$simrun)
trialdata.sim$stake <- as.factor(trialdata.sim$stake)
levels(trialdata.sim$stake) <- c("low", "high")
trialdata.sim$s1 <- as.factor(trialdata.sim$s1)
trialdata.sim$choice <- as.factor(trialdata.sim$choice)
trialdata.sim$s2 <- as.factor(trialdata.sim$s2)
# points baseline-correction
trialdata.sim$points_bc <- trialdata.sim$points - (trialdata.sim$reward1+trialdata.sim$reward2)/2
# aggregate simulated data
d.sim <- trialdata.sim %>%
group_by(id, version, simrun) %>% # 1. for each simulated agents and each run
summarize(points_bc_sim = mean(points_bc)) %>%
group_by(id, version) %>% # 2. for each simulated agents across runs
summarize(points_bc_sim = mean(points_bc_sim))
# load participant data
trialdata.emp <- readRDS("./trialdata_run.rds")
# aggregate participant data
d.emp <- trialdata.emp %>%
group_by(subid, version) %>%
summarize(points_bc_emp = mean(points_bc, na.rm=T))
colnames(d.emp) <-c("id","version","points_bc_emp")
# merge simulated and participant data
d <- merge(d.emp, d.sim)
# plot participant data against simulated data
ggplot(d, aes(x=points_bc_emp, y=points_bc_sim)) +
geom_point(size=3, alpha=.8) + # individual data points
scale_colour_manual(values=c("#FF7F00")) + # color for age groups
scale_shape_manual(values=c(16,17)) + # shape for age groups
geom_abline(slope=1, intercept=0) + coord_equal(ratio = 1, xlim=c(-0.3, 0.9), ylim=c(-0.3, 0.9)) + # identity line, fix ratio
theme_classic() +
theme(axis.title.x =element_text(size=16), axis.title.y=element_text(size=16),
axis.text.x =element_text(size=16), axis.text.y=element_text(size=16))+
guides(colour = guide_legend(override.aes = list(alpha=1, size=4))) + theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "baseline-corrected reward (observed)", y= "baseline-corrected reward (simulated)", shape="age group", colour="age group")
# correlation for complete sample
cor(d$points_bc_sim, d$points_bc_emp)
cor.test(d$points_bc_sim, d$points_bc_emp)
ggsave(
filename = "./postpredcheck.tiff", # 保存的文件名称。通过后缀来决定生成什么格式的图片
width = 6,             # 宽
height = 6,            # 高
units = "in",          # 单位
dpi = 500              # 分辨率DPI
)
trialdata.sim <- read.csv("trialdata_Hybrid_wm_sim.csv", sep=";")
trialdata.sim <- read.csv("./trialdata_Hybrid_wm_sim.csv", sep=";")
source("C:/Users/Administrator/Desktop/github/code/postpredcheck/postpredcheck.R", encoding = 'UTF-8')
source("C:/Users/Administrator/Desktop/github/code/postpredcheck/postpredcheck.R", encoding = 'UTF-8')
getwd()
